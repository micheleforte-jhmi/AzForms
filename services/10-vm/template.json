{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "1468082059466886736"
    }
  },
}
@description('Name of the virtual machine')
param vmName string

@description('Size of the virtual machine')
param vmSize string {
  allowedValues: [
    'Standard_D2s_v3'
    'Standard_D2s_v4'
    'Standard_D2s_v5'
    'Standard_D4s_v5'
  ]
}

@description('Key Vault name')
param keyVaultName string = 'AzFormDeployKV'

@description('Secret name for the admin password')
param adminPasswordSecretName string = 'adminpassword'

@description('OS version for the virtual machine')
param osVersion string {
  allowedValues: [
    '2019-Datacenter'
    '2022-Datacenter'
  ]
}

@description('Select an existing Virtual Network')
param vnetName string {
  allowedValues: [
    'AZ-East-JH-Training-10.150.224.0-20'
    'AZ-East2-JH-TRAINING-10.156.224.0-20'
  ]
}

@description('Select an existing Virtual Network resource group')
param vnetResourceGroup string {
  allowedValues: [
    'JH-TRAINING-PROD-RG'
    'JH-TRAINING-TEST-RG'
  ]
}

@description('Select a subnet name from the selected Virtual Network')
param subnetName string {
  allowedValues: [
    'AZ-East2-JH-TRAINING-10.156.231.0-20'
    'AZ-East-JH-Training-10.150.224.0-20'
  ]
}

@description('Location for all resources')
param location string {
  allowedValues: [
    'eastus'
    'westus'
    'centralus'
  ]
}

@description('Admin Username for the virtual machine')
param adminUsername string = 'CloudADM'

// Get the existing virtual network
resource vnet 'Microsoft.Network/virtualNetworks@2020-11-01' existing = {
  name: vnetName
  scope: resourceGroup(vnetResourceGroup)
}

// Get the existing subnet
resource subnet 'Microsoft.Network/virtualNetworks/subnets@2020-11-01' existing = {
  name: subnetName
  parent: vnet
}

// Get the Key Vault
resource keyVault 'Microsoft.KeyVault/vaults@2021-04-01-preview' existing = {
  name: keyVaultName
}

// Get the admin password from Key Vault
resource adminPasswordSecret 'Microsoft.KeyVault/vaults/secrets@2021-04-01-preview' existing = {
  name: adminPasswordSecretName
  parent: keyVault
}

// Create a network interface without a public IP address
resource nic 'Microsoft.Network/networkInterfaces@2020-11-01' = {
  name: '${vmName}-nic'
  location: location
  properties: {
    ipConfigurations: [
      {
        name: 'ipconfig1'
        properties: {
          subnet: {
            id: subnet.id
          }
          privateIPAllocationMethod: 'Dynamic'
        }
      }
    ]
  }
}

// Create a virtual machine
resource vm 'Microsoft.Compute/virtualMachines@2020-06-01' = {
  name: vmName
  location: location
  properties: {
    hardwareProfile: {
      vmSize: vmSize
    }
    osProfile: {
      computerName: vmName
      adminUsername: adminUsername
      adminPassword: {
        value: adminPasswordSecret.properties.value
      }
    }
    storageProfile: {
      imageReference: {
        publisher: 'MicrosoftWindowsServer'
        offer: 'WindowsServer'
        sku: osVersion
        version: 'latest'
      }
      osDisk: {
        createOption: 'FromImage'
        managedDisk: {
          storageAccountType: 'Standard_LRS'
        }
      }
    }
    networkProfile: {
      networkInterfaces: [
        {
          id: nic.id
        }
      ]
    }
  }
  dependsOn: [
    nic
  ]
}

output vmId string = vm.id
